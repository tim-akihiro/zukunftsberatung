name: Build Blogpost from Issue

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  issues: write

jobs:
  build:
    if: contains(github.event.issue.labels.*.name, 'blogpost')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse Issue and write Markdown
        id: gen
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const path = require("path");

            const body = context.payload.issue.body || "";

            function val(label){
              const re = new RegExp(`^###\\s+${label.replace(/[.*+?^${}()|[\\]\\\\]/g,"\\$&")}\\s*\\n([\\s\\S]*?)(?=\\n^###\\s+|$)`, "im");
              const m = body.match(re);
              return m ? m[1].trim() : "";
            }
            function valAny(labels){
              for (const L of labels){
                const v = val(L);
                if (v) return v;
              }
              return "";
            }
            function valLastSection(){
              const parts = body.split(/\n(?=###\s+)/);
              return parts.length ? parts[parts.length-1].replace(/^###\s+[^\n]+\n/i,"").trim() : "";
            }

            const title      = valAny(["Titel"]);
            const slugManual = valAny(["Slug (optional)","Slug"]);
            const tagsRaw    = valAny(["Tags (Komma-getrennt, klein, ohne Leerzeichen)","Tags"]);
            const cover      = valAny(["Cover-Bild-URL (optional)","Cover"]);
            const excerpt    = valAny(["Kurz-Teaser (max. 240 Zeichen)","Kurz-Teaser","Teaser"]);
            const metaTitle  = valAny(["Meta Title (optional)","Meta Title"]);
            const metaDesc   = valAny(["Meta Description (optional)","Meta Description"]);

            let bodymd = valAny(["Artikel (Markdown)","Artikel","Content","Inhalt"]);
            if (!bodymd) bodymd = valLastSection();              // Fallback: letzter Abschnitt
            bodymd = bodymd.replace(/^```[a-z]*\n?/i,'')         // evtl. Codezaun entfernen
                           .replace(/\n```$/,'')
                           .trim();
            if (!title)  core.setFailed("Titel fehlt.");
            if (!bodymd) core.setFailed("Artikel (Markdown) fehlt.");


            const tags = (tagsRaw || "").split(",").map(s=>s.trim()).filter(Boolean);

            function slugify(s){
              return s.toLowerCase()
                .normalize("NFKD").replace(/[\u0300-\u036f]/g,"")
                .replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"").slice(0,80);
            }

            const created = new Date(context.payload.issue.created_at);
            const y = created.getUTCFullYear();
            const m = String(created.getUTCMonth()+1).padStart(2,'0');
            const d = String(created.getUTCDate()).padStart(2,'0');
            const date = `${y}-${m}-${d}`;

            const slug = slugManual ? slugify(slugManual) : slugify(title);
            const fileName = `${date}-${slug}.md`;
            const repoPath = "finalfinal/blog/posts";
            const fullPath = path.join(process.cwd(), repoPath, fileName);

            const lines = ["---"];
            lines.push(`title: ${JSON.stringify(title)}`);
            lines.push(`date: ${date}`);
            lines.push(`tags: [${tags.join(", ")}]`);
            if (cover)     lines.push(`cover: ${JSON.stringify(cover)}`);
            if (excerpt)   lines.push(`excerpt: ${JSON.stringify(excerpt)}`);
            if (metaTitle) lines.push(`metaTitle: ${JSON.stringify(metaTitle)}`);
            if (metaDesc)  lines.push(`metaDescription: ${JSON.stringify(metaDesc)}`);
            lines.push("---", "", bodymd.trim(), "");

            fs.mkdirSync(path.join(process.cwd(), repoPath), { recursive: true });
            fs.writeFileSync(fullPath, lines.join("\n"));

            core.setOutput("file", `${repoPath}/${fileName}`);
            core.setOutput("slug", slug);
            core.setOutput("date", date);

      - name: Commit and push
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add finalfinal/blog/posts/*.md
          git commit -m "blog: add ${{ steps.gen.outputs.file }}" || echo "no changes"
          git push

      - name: Comment with link and close
        uses: actions/github-script@v7
        with:
          script: |
            const file = `${{ toJSON(steps.gen.outputs.file) }}`;
            const url  = `https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/${file}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Erstellt: ${url}`
            });
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: "closed"
            });
